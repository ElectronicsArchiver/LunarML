(*
 * Copyright (c) 2021 ARATA Mizuki
 * This file is part of LunarML.
 *)
fun nilPat span = UnfixedSyntax.NonInfixVIdPat (span, Syntax.MkLongVId (nil, Syntax.MkVId ("nil")))
fun trueExp span = UnfixedSyntax.NonInfixVIdExp (span, Syntax.MkLongVId (nil, Syntax.MkVId ("true")))
fun falseExp span = UnfixedSyntax.NonInfixVIdExp (span, Syntax.MkLongVId (nil, Syntax.MkVId ("false")))
fun nilExp span = UnfixedSyntax.NonInfixVIdExp (span, Syntax.MkLongVId (nil, Syntax.MkVId ("nil")))
fun consOp span = UnfixedSyntax.NonInfixVIdExp (span, Syntax.MkLongVId (nil, Syntax.MkVId ("::")))
fun MkAndAlsoExp (span,e1,e2) = UnfixedSyntax.IfThenElseExp (span, e1, e2, falseExp span)
fun MkOrElseExp (span,e1,e2) = UnfixedSyntax.IfThenElseExp (span, e1, trueExp span, e2)
fun MkPairExp (span,e1,e2) = UnfixedSyntax.RecordExp(span, [(Syntax.NumericLabel 1, e1), (Syntax.NumericLabel 2, e2)])
fun MkConsExp (span,e1,e2) = UnfixedSyntax.AppExp (span, consOp span, MkPairExp (span, e1,e2))
fun MkListExp (span, nil) = nilExp span
  | MkListExp (span, x :: xs) = MkConsExp (span, x, MkListExp (span, xs))
fun MkPairPat (span, p1, p2) = UnfixedSyntax.TuplePat(span, [p1, p2])
fun MkConsPat (span, p1, p2) = UnfixedSyntax.ConPat(span, Syntax.MkLongVId(nil, Syntax.MkVId("::")), MkPairPat(span, p1, p2))
fun MkListPat (span, nil) = nilPat span
  | MkListPat (span, x :: xs) = MkConsPat (span, x, MkListPat (span, xs))
fun MkSequentialExp (span, e1, []) = e1
  | MkSequentialExp (span, e1, e2 :: xs) = UnfixedSyntax.CaseExp(span,e1,[(UnfixedSyntax.WildcardPat span, MkSequentialExp(span,e2,xs))])
fun MkTupleTy(_,[x]) = x
  | MkTupleTy(span, xs) = let fun doFields i nil = nil
                                | doFields i (t :: ts) = (Syntax.NumericLabel i, t) :: doFields (i + 1) ts
                          in Syntax.RecordType (span, doFields 1 xs)
                          end
fun prependStrId(strid, Syntax.MkQualified(strids, x)) = Syntax.MkQualified(strid :: strids, x)
fun span(p1,p2) = { start = p1, end_ = p2 }
%%

%eop EOF
%pos SourcePos.pos
%pure
%arg (filename) : string

%term AlnumIdent of string (* alphanumeric identifier not starting with a prime *)
    | PrimeIdent of string (* alphanumeric identifier starting with a prime *)
    | SymbolicIdent of string
    | PosInt of int (* positive integer literal not starting with 0 *)
    | ZNIntConst of int (* starting with 0, or negative integer literal *)
    | WordConst of word
    | RealConst of string
    | StringConst of string
    | CharacterConst of string
    (* * . *)
    | ASTERISK | DOT
    (* ( ) [ ] { } , : *)
    | LPAREN | RPAREN | LBRACK | RBRACK | LBRACE | RBRACE | COMMA | COLON
    (* ; ... _ | = => -> # *)
    | SEMICOLON | ELLIPSIS | UNDERSCORE | BAR | EQUALS | DARROW | ARROW | HASH
    (* :> *)
    | COLONGT
    (* reserved words *)
    | ABSTYPE | AND | ANDALSO | AS | CASE | DATATYPE | DO | ELSE | END | EQTYPE
    | EXCEPTION | FN | FUN | FUNCTOR | HANDLE | IF | IN | INCLUDE | INFIX
    | INFIXR | LET | LOCAL | NONFIX | OF | OP | OPEN | ORELSE | RAISE | REC
    | SHARING | SIG | SIGNATURE | STRUCT | STRUCTURE | THEN | TYPE | VAL | WITH
    | WITHTYPE | WHERE | WHILE
    (* other *)
    | EOF
%nonterm START of (UnfixedSyntax.Dec Syntax.StrDec) list
       | IntConst of int
       | SCon of Syntax.SCon
       | TyVar of Syntax.TyVar
       | VId of Syntax.VId
       | BoundVId of Syntax.VId
       | StrId of Syntax.StrId
       | Lab of Syntax.Label
       | TyCon of Syntax.TyCon
       | LongVId of Syntax.LongVId
       | LongBoundVId of Syntax.LongVId
       | LongTyCon of Syntax.LongTyCon
       | LongStrId of Syntax.LongStrId
       | Opt_OP of bool
       | AtPat of UnfixedSyntax.Pat
       | AtPats of UnfixedSyntax.Pat list
       | TypedPatPun of Syntax.Label * UnfixedSyntax.Pat
       | PatPun of Syntax.Label * UnfixedSyntax.Pat
       | PatRow of (Syntax.Label * UnfixedSyntax.Pat) list * bool
       | AppOrInfPat of UnfixedSyntax.Pat list
       | TypedPat of UnfixedSyntax.Pat
       | Pat of UnfixedSyntax.Pat
       | PatSeqRest of UnfixedSyntax.Pat list
       | AtTy of Syntax.Ty
       | ConTy of Syntax.Ty
       | TupTy of Syntax.Ty list
       | Ty_NoARROW of Syntax.Ty
       | Ty of Syntax.Ty
       | TySeqRest of Syntax.Ty list
       | TyVarSeq of Syntax.TyVar list
       | TyVarSeqRest of Syntax.TyVar list
       | TyRow of (Syntax.Label * Syntax.Ty) list
       | AtExp of UnfixedSyntax.Exp
       | AppOrInfExp of UnfixedSyntax.Exp list
       | ExpRow of (Syntax.Label * UnfixedSyntax.Exp) list
       | ExpCSeqRest of UnfixedSyntax.Exp list
       | ExpSSeqRest of UnfixedSyntax.Exp list
       | TypedExp of UnfixedSyntax.Exp
       | OrElseExp of UnfixedSyntax.Exp
       | Exp_NoMatch of UnfixedSyntax.Exp
       | Exp of UnfixedSyntax.Exp
       | MatchClauses of (UnfixedSyntax.Pat * UnfixedSyntax.Exp) list
       | MRule of UnfixedSyntax.Pat * UnfixedSyntax.Exp
       | Dec_NoLocal of UnfixedSyntax.Dec
       | Dec of UnfixedSyntax.Dec
       | Decs of UnfixedSyntax.Dec list
       | LongStrIds of Syntax.LongStrId list
       | VIds of Syntax.VId list
       | ValBind of UnfixedSyntax.ValBind list
       | FValBind of UnfixedSyntax.FValBind list
       | FMatch of UnfixedSyntax.FMRule list
       | FMRule of UnfixedSyntax.FMRule
       | FMRule_NoMatch of UnfixedSyntax.FMRule
       | FPat of UnfixedSyntax.FPat
       | TypBind of Syntax.TypBind list
       | DatBind of Syntax.DatBind list
       | DatBindRest of Syntax.DatBind list
       | ConBind of Syntax.ConBind list
       | ConBindRest of Syntax.ConBind list
       | ExBind of Syntax.ExBind list
       | ExBindRest of Syntax.ExBind list
       | StrExp of UnfixedSyntax.Dec Syntax.StrExp
       | ProperStrDec of UnfixedSyntax.Dec Syntax.StrDec
       | StrDecs of (UnfixedSyntax.Dec Syntax.StrDec) list
       | StrDecs_NoSemicolon of (UnfixedSyntax.Dec Syntax.StrDec) list
       | StrBind of (Syntax.StrId * UnfixedSyntax.Dec Syntax.StrExp) list
       | TopDecs of (UnfixedSyntax.Dec Syntax.StrDec) list
       | Program of (UnfixedSyntax.Dec Syntax.StrDec) list

%name LunarML

%noshift EOF
%nodefault

%right ARROW (* function type expression *)
%right RAISE
%right HANDLE
%left ORELSE
%left ANDALSO

%verbose

%%

START : Program (Program)

IntConst : PosInt (PosInt)
         | ZNIntConst (ZNIntConst)

SCon : IntConst (Syntax.IntegerConstant IntConst)
     | WordConst (Syntax.WordConstant WordConst)
     | RealConst (Syntax.RealConstant RealConst)
     | StringConst (Syntax.StringConstant StringConst)
     | CharacterConst (Syntax.CharacterConstant CharacterConst)

(* type variable *)
TyVar : PrimeIdent (Syntax.MkTyVar PrimeIdent)

(* value identifiers *)
VId : BoundVId (BoundVId)
    | EQUALS (Syntax.MkVId "=") (* ? *)

(* value identifiers, excluding '=' *)
BoundVId : AlnumIdent (Syntax.MkVId AlnumIdent)
         | SymbolicIdent (Syntax.MkVId SymbolicIdent)
         | ASTERISK (Syntax.MkVId "*")

(* structure identifier *)
StrId : AlnumIdent (Syntax.MkStrId AlnumIdent)

(* record labels *)
Lab : AlnumIdent (Syntax.IdentifierLabel AlnumIdent)
    | SymbolicIdent (Syntax.IdentifierLabel SymbolicIdent)
    | ASTERISK (Syntax.IdentifierLabel "*")
    | PosInt (Syntax.NumericLabel PosInt) (* numeric labels *)

(* type constructors; "*" is not included *)
TyCon : AlnumIdent (Syntax.MkTyCon AlnumIdent)
      | SymbolicIdent (Syntax.MkTyCon SymbolicIdent)

(* long value identifiers, including '=' *)
LongVId : VId (Syntax.MkLongVId (nil, VId))
        | StrId DOT LongVId (prependStrId(StrId, LongVId))

(* long value identifiers, excluding unqualified '=' *)
LongBoundVId : BoundVId (Syntax.MkLongVId (nil, BoundVId))
             | StrId DOT LongBoundVId (prependStrId(StrId, LongBoundVId))

(* long type constructors *)
LongTyCon : TyCon (Syntax.MkLongTyCon (nil, TyCon))
          | StrId DOT LongTyCon (prependStrId(StrId, LongTyCon))

(* long structure identifiers *)
LongStrId : StrId (Syntax.MkLongStrId (nil, StrId))
          | StrId DOT LongStrId (prependStrId(StrId, LongStrId))

Opt_OP : (* empty *) (false)
       | OP (true)

(* atomic patterns *)
AtPat : UNDERSCORE (UnfixedSyntax.WildcardPat(span(UNDERSCOREleft,UNDERSCOREright))) (* wildcard *)
      | SCon (UnfixedSyntax.SConPat(span(SConleft,SConright),SCon)) (* special constant *)
      | OP LongVId (UnfixedSyntax.NonInfixVIdPat(span(OPleft,LongVIdright),LongVId)) (* value identifier, including 'op =' *)
      | LongBoundVId (case LongBoundVId of
                          Syntax.MkQualified([], vid) => UnfixedSyntax.InfixOrVIdPat(span(LongBoundVIdleft,LongBoundVIdright),vid)
                        | longvid => UnfixedSyntax.NonInfixVIdPat(span(LongBoundVIdleft,LongBoundVIdright),longvid)
                     ) (* value identifier *)
      | LBRACE RBRACE (UnfixedSyntax.RecordPat{sourceSpan=span(LBRACEleft,RBRACEright), fields=nil, wildcard=false}) (* empty record *)
      | LBRACE PatRow RBRACE (case PatRow of (fields, wildcard) => UnfixedSyntax.RecordPat{sourceSpan=span(LBRACEleft, RBRACEright), fields=fields, wildcard=wildcard}) (* record *)
      | LPAREN RPAREN (UnfixedSyntax.RecordPat {sourceSpan=span(LPARENleft,RPARENright), fields=nil, wildcard=false}) (* [derived] empty tuple *)
      | LPAREN Pat RPAREN (case Pat of
                               UnfixedSyntax.InfixOrVIdPat _ => UnfixedSyntax.JuxtapositionPat(span(LPARENleft,RPARENright), [Pat])
                             | pat => pat
                          ) (* parenthesized pattern *)
      | LPAREN Pat COMMA Pat PatSeqRest RPAREN (UnfixedSyntax.TuplePat(span(LPARENleft,RPARENright), Pat1 :: Pat2 :: PatSeqRest)) (* [derived] tuple pattern *)
      | LBRACK RBRACK (nilPat (span(LBRACKleft,RBRACKright))) (* [derived] empty list *)
      | LBRACK Pat PatSeqRest RBRACK (MkListPat(span(LBRACKleft,RBRACKright), Pat :: PatSeqRest)) (* [derived] list pattern *)

(* one or more atomic patterns *)
AtPats : AtPat ([AtPat])
       | AtPat AtPats (AtPat :: AtPats)

TypedPat : AtPats (UnfixedSyntax.JuxtapositionPat(span(AtPatsleft, AtPatsright), AtPats))
         | TypedPat COLON Ty (UnfixedSyntax.TypedPat (span(TypedPatleft, Tyright), TypedPat, Ty)) (* typed *)

(* patterns *)
Pat : TypedPat (TypedPat)
(*
    | OP VId COLON Ty AS Pat (UnfixedSyntax.LayeredPat (OP_VId, SOME Ty, Pat)) (* layered *)
    | OP VId AS Pat (UnfixedSyntax.LayeredPat (OP_VId, NONE, Pat)) (* layered *)
    | BoundVId COLON Ty AS Pat (UnfixedSyntax.LayeredPat (OP_VId, SOME Ty, Pat)) (* layered *)
    | BoundVId AS Pat (UnfixedSyntax.LayeredPat (OP_VId, NONE, Pat)) (* layered *)
*)
    | TypedPat AS Pat (UnfixedSyntax.ConjunctivePat(span(TypedPatleft,Patright), TypedPat, Pat)) (* layered or [Successor ML] conjunctive (R) *)

TypedPatPun : BoundVId ((case BoundVId of Syntax.MkVId vid => Syntax.IdentifierLabel vid, UnfixedSyntax.NonInfixVIdPat(span(BoundVIdleft,BoundVIdright),Syntax.MkQualified([],BoundVId))))
            | BoundVId COLON Ty ((case BoundVId of Syntax.MkVId vid => Syntax.IdentifierLabel vid, UnfixedSyntax.TypedPat(span(BoundVIdleft,Tyright),UnfixedSyntax.NonInfixVIdPat(span(BoundVIdleft,BoundVIdright),Syntax.MkQualified([],BoundVId)),Ty)))

PatPun : TypedPatPun (TypedPatPun)
       | TypedPatPun AS Pat ((#1 TypedPatPun, UnfixedSyntax.ConjunctivePat(span(TypedPatPunleft,Patright), #2 TypedPatPun, Pat)))

(* pattern rows *)
PatRow : ELLIPSIS ((nil, true)) (* wildcard *)
       | Lab EQUALS Pat COMMA PatRow (case PatRow of (s,t) => ((Lab, Pat) :: s, t)) (* pattern row *)
       | Lab EQUALS Pat (([(Lab, Pat)], false))
       | PatPun COMMA PatRow (case PatRow of (s,t) => ((#1 PatPun, #2 PatPun) :: s, t)) (* [derived] punning *)
       | PatPun (([(#1 PatPun, #2 PatPun)], false)) (* [derived] punning *)

PatSeqRest : COMMA Pat PatSeqRest (Pat :: PatSeqRest)
           | (nil)

AtTy : TyVar (Syntax.TyVar(span(TyVarleft,TyVarright), TyVar))
     | LBRACE RBRACE (Syntax.RecordType(span(LBRACEleft, RBRACEright), nil)) (* record type expression *)
     | LBRACE TyRow RBRACE (Syntax.RecordType(span(LBRACEleft, RBRACEright), TyRow)) (* record type expression *)
     | LPAREN Ty RPAREN (Ty)

ConTy : AtTy (AtTy)
      | ConTy LongTyCon (Syntax.TyCon (span(ConTyleft, LongTyConright), [ConTy], LongTyCon)) (* type construction *)
      | LongTyCon (Syntax.TyCon (span(LongTyConleft, LongTyConright), nil, LongTyCon)) (* type construction *)
      | LPAREN Ty COMMA Ty TySeqRest RPAREN LongTyCon (Syntax.TyCon (span(LPARENleft, LongTyConright), Ty1 :: Ty2 :: TySeqRest, LongTyCon)) (* type construction *)

TupTy : ConTy ([ConTy])
      | ConTy ASTERISK TupTy (ConTy :: TupTy)

(* type expressions *)
Ty : TupTy (MkTupleTy(span(TupTyleft, TupTyright), TupTy))
   | TupTy ARROW Ty (Syntax.FnType (span(TupTyleft, Tyright), MkTupleTy(span(TupTyleft, TupTyright), TupTy), Ty)) (* function type expression (R) *)
   (* tuple type *)

TySeqRest : COMMA Ty TySeqRest (Ty :: TySeqRest) (* *)
          | (nil) (* empty *)

TyVarSeq : TyVar ([TyVar]) (* singleton sequence *)
         | (nil) (* empty sequence *)
         | LPAREN TyVar TyVarSeqRest RPAREN (TyVar :: TyVarSeqRest) (* sequence *)

TyVarSeqRest : COMMA TyVar TyVarSeqRest (TyVar :: TyVarSeqRest) (* *)
             | (nil) (* empty *)

(* type-expression rows *)
TyRow : Lab COLON Ty COMMA TyRow ((Lab, Ty) :: TyRow) (* type-expression row *)
      | Lab COLON Ty ((Lab, Ty) :: nil) (* type-expression row *)

(* atomic expressions *)
AtExp : SCon (UnfixedSyntax.SConExp(span(SConleft,SConright),SCon)) (* special constant *)
      | OP LongVId (UnfixedSyntax.NonInfixVIdExp(span(OPleft,LongVIdright),LongVId)) (* value identifier *)
      | LongBoundVId (case LongBoundVId of
                          Syntax.MkQualified([], vid) => UnfixedSyntax.InfixOrVIdExp(span(LongBoundVIdleft,LongBoundVIdright),vid)
                        | longvid => UnfixedSyntax.NonInfixVIdExp(span(LongBoundVIdleft,LongBoundVIdright),longvid)
                     ) (* value identifier *)
      | EQUALS (UnfixedSyntax.InfixOrVIdExp(span(EQUALSleft,EQUALSright),Syntax.MkVId "="))
      | LBRACE RBRACE (UnfixedSyntax.RecordExp(span(LBRACEleft,RBRACEright),nil)) (* empty record *)
      | LBRACE ExpRow RBRACE (UnfixedSyntax.RecordExp(span(LBRACEleft,RBRACEright),ExpRow)) (* record *)
      | LET Decs IN Exp END (UnfixedSyntax.LetInExp (span(LETleft,ENDright), Decs, Exp)) (* local declaration *)
      | LPAREN Exp RPAREN (case Exp of
                               UnfixedSyntax.InfixOrVIdExp _ => UnfixedSyntax.JuxtapositionExp(span(LPARENleft,RPARENright),[Exp])
                             | exp => exp
                          ) (* parenthesized expression *)
      | LPAREN RPAREN (UnfixedSyntax.RecordExp(span(LPARENleft,RPARENright),nil)) (* [derived] 0-tuple *)
      | LPAREN Exp COMMA Exp ExpCSeqRest RPAREN (UnfixedSyntax.TupleExp (span(LPARENleft,RPARENright), Exp1 :: Exp2 :: ExpCSeqRest)) (* [derived] tuple: {1=Exp1,...,n=Expn} (n >= 2) *)
      | LPAREN Exp SEMICOLON Exp ExpSSeqRest RPAREN (MkSequentialExp (span(LPARENleft,RPARENright), Exp1, Exp2 :: ExpSSeqRest)) (* [derived] sequential execution *)
      | LET Decs IN Exp SEMICOLON Exp ExpSSeqRest END (UnfixedSyntax.LetInExp (span(LETleft,ENDright), Decs, MkSequentialExp(span(Exp1left, ExpSSeqRestright), Exp1, Exp2 :: ExpSSeqRest))) (* [derived] local declaration *)
      | LBRACK RBRACK (MkListExp(span(LBRACKleft,RBRACKright),[])) (* [derived] list: Exp1 :: ... :: Expn :: nil *)
      | LBRACK Exp ExpCSeqRest RBRACK (MkListExp(span(LBRACKleft,RBRACKright), Exp :: ExpCSeqRest)) (* [derived] list: Exp1 :: ... :: Expn :: nil *)
      | HASH Lab (UnfixedSyntax.ProjectionExp(span(HASHleft,Labright), Lab)) (* [derived] projection: fn {Lab=VId,...} => VId *)

(* comma-separated list of expressions *)
ExpCSeqRest : COMMA Exp ExpCSeqRest (Exp :: ExpCSeqRest)
            | (nil)

(* semicolon-separated list of expressions *)
ExpSSeqRest : SEMICOLON Exp ExpSSeqRest (Exp :: ExpSSeqRest)
            | (nil)

(* expression rows *)
ExpRow : Lab EQUALS Exp COMMA ExpRow ((Lab, Exp) :: ExpRow)
       | Lab EQUALS Exp ((Lab, Exp) :: nil)

(*
AppExp : AtExp
       | AppExp AtExp
InfExp : AppExp
       | InfExp VId InfExp
*)

AppOrInfExp : AtExp AppOrInfExp (AtExp :: AppOrInfExp) (* atomic *)
            | AtExp ([AtExp])

TypedExp : AppOrInfExp (UnfixedSyntax.JuxtapositionExp(span(AppOrInfExpleft,AppOrInfExpright), AppOrInfExp))
         | TypedExp COLON Ty (UnfixedSyntax.TypedExp (span(TypedExpleft,Tyright), TypedExp, Ty)) (* typed (L) *)

OrElseExp : TypedExp (TypedExp)
          | OrElseExp ANDALSO OrElseExp (MkAndAlsoExp (span(OrElseExp1left, OrElseExp2right), OrElseExp1, OrElseExp2)) (* [derived] conjunction *)
          | OrElseExp ORELSE OrElseExp (MkOrElseExp (span(OrElseExp1left, OrElseExp2right), OrElseExp1, OrElseExp2)) (* [derived] disjunction *)

(* expressions *)
Exp : OrElseExp (OrElseExp)
    | OrElseExp HANDLE MatchClauses (UnfixedSyntax.HandleExp (span(OrElseExpleft, MatchClausesright), OrElseExp, MatchClauses)) (* handle exception *)
    | RAISE Exp (UnfixedSyntax.RaiseExp(span(RAISEleft, Expright), Exp)) (* raise exception *)
    | IF Exp THEN Exp ELSE Exp (UnfixedSyntax.IfThenElseExp (span(IFleft, Exp3right), Exp1, Exp2, Exp3)) (* [derived] conditional *)
    | WHILE Exp DO Exp (UnfixedSyntax.WhileDoExp (span(WHILEleft, Exp2right), Exp1, Exp2)) (* [derived] iteration *)
    | CASE Exp OF MatchClauses (UnfixedSyntax.CaseExp (span(CASEleft, MatchClausesright), Exp, MatchClauses)) (* [derived] pattern match: (fn MatchClauses)(Exp) *)
    | FN MatchClauses (UnfixedSyntax.FnExp(span(FNleft, MatchClausesright), MatchClauses)) (* function *)

Exp_NoMatch : OrElseExp (OrElseExp)
            | RAISE Exp_NoMatch (UnfixedSyntax.RaiseExp(span(RAISEleft, Exp_NoMatchright), Exp_NoMatch)) (* raise exception *)
            | IF Exp THEN Exp ELSE Exp_NoMatch (UnfixedSyntax.IfThenElseExp (span(IFleft, Exp_NoMatchright), Exp1, Exp2, Exp_NoMatch))
            | WHILE Exp DO Exp_NoMatch (UnfixedSyntax.WhileDoExp (span(WHILEleft, Exp_NoMatchright), Exp, Exp_NoMatch)) (* [derived] iteration *)

(* matches *)
MatchClauses : Pat DARROW Exp_NoMatch BAR MatchClauses ((Pat, Exp_NoMatch) :: MatchClauses)
             | Pat DARROW Exp ((Pat, Exp) :: nil)

(* a declaration, excluding local-in-end *)
Dec_NoLocal : VAL ValBind (UnfixedSyntax.ValDec (span(VALleft, ValBindright), nil, ValBind)) (* value declaration (non-recursive) *)
            | VAL TyVar ValBind (UnfixedSyntax.ValDec (span(VALleft, ValBindright), [TyVar], ValBind)) (* value declaration (non-recursive) *)
            | VAL LPAREN TyVar TyVarSeqRest RPAREN ValBind (UnfixedSyntax.ValDec (span(VALleft, ValBindright), TyVar :: TyVarSeqRest, ValBind)) (* value declaration (non-recursive) *)
            | VAL REC ValBind (UnfixedSyntax.RecValDec (span(VALleft, ValBindright), nil, ValBind)) (* value declaration (recursive) *)
            | VAL REC TyVar ValBind (UnfixedSyntax.RecValDec (span(VALleft, ValBindright), [TyVar], ValBind)) (* [Successor ML-style] value declaration (recursive) *)
            | VAL REC LPAREN TyVar TyVarSeqRest RPAREN ValBind (UnfixedSyntax.RecValDec (span(VALleft, ValBindright), TyVar :: TyVarSeqRest, ValBind)) (* [Successor ML-style] value declaration (recursive) *)
            | VAL TyVar REC ValBind (UnfixedSyntax.RecValDec (span(VALleft, ValBindright), [TyVar], ValBind)) (* [SML97-style] value declaration (recursive) *)
            | VAL LPAREN TyVar TyVarSeqRest RPAREN REC ValBind (UnfixedSyntax.RecValDec (span(VALleft, ValBindright), TyVar :: TyVarSeqRest, ValBind)) (* [SML97-style] value declaration (recursive) *)
            | FUN FValBind (UnfixedSyntax.FValDec (span(FUNleft, FValBindright), [], FValBind)) (* [derived] function declaration *)
            | FUN TyVar FValBind (UnfixedSyntax.FValDec (span(FUNleft, FValBindright), [TyVar], FValBind)) (* [derived] function declaration *)
            | FUN LPAREN TyVar TyVarSeqRest RPAREN FValBind (UnfixedSyntax.FValDec (span(FUNleft, FValBindright), TyVar :: TyVarSeqRest, FValBind)) (* [derived] function declaration *)
            | TYPE TypBind (UnfixedSyntax.TypeDec(span(TYPEleft, TypBindright), TypBind)) (* type declaration *)
            (* | DATATYPE DatBind (UnfixedSyntax.DatatypeDec(span(DATATYPEleft, DatBindright), DatBind)) (* datatype declaration *) *)
            | DATATYPE TyCon EQUALS ConBind DatBindRest (UnfixedSyntax.DatatypeDec(span(DATATYPEleft, DatBindRestright), Syntax.DatBind (span(TyConleft, ConBindright), [], TyCon, ConBind) :: DatBindRest)) (* datatype declaration *)
            | DATATYPE TyVar TyCon EQUALS ConBind DatBindRest (UnfixedSyntax.DatatypeDec(span(DATATYPEleft, DatBindRestright), Syntax.DatBind (span(TyVarleft, ConBindright), [TyVar], TyCon, ConBind) :: DatBindRest)) (* datatype declaration *)
            | DATATYPE LPAREN TyVar TyVarSeqRest RPAREN TyCon EQUALS ConBind DatBindRest (UnfixedSyntax.DatatypeDec(span(DATATYPEleft, DatBindRestright), Syntax.DatBind (span(LPARENleft, ConBindright), TyVar :: TyVarSeqRest, TyCon, ConBind) :: DatBindRest)) (* datatype declaration *)
            | DATATYPE TyCon EQUALS DATATYPE LongTyCon (UnfixedSyntax.DatatypeRepDec (span(DATATYPEleft, LongTyConright), TyCon, LongTyCon)) (* datatype replication *)
            | ABSTYPE DatBind WITH Decs END (UnfixedSyntax.AbstypeDec (span(ABSTYPEleft, ENDright), DatBind, Decs)) (* abstype declaration *)
            | EXCEPTION ExBind (UnfixedSyntax.ExceptionDec(span(EXCEPTIONleft, ExBindright), ExBind)) (* exception declaration *)
            | OPEN LongStrIds (UnfixedSyntax.OpenDec(span(OPENleft, LongStrIdsright), LongStrIds)) (* open declaration *)
            | INFIX IntConst VIds (UnfixedSyntax.FixityDec (span(INFIXleft, VIdsright), Syntax.Infix (Syntax.LeftAssoc IntConst), VIds)) (* infix (L) directive *)
            | INFIX VIds (UnfixedSyntax.FixityDec (span(INFIXleft, VIdsright), Syntax.Infix (Syntax.LeftAssoc 0), VIds)) (* infix (L) directive *)
            | INFIXR IntConst VIds (UnfixedSyntax.FixityDec (span(INFIXRleft, VIdsright), Syntax.Infix (Syntax.RightAssoc IntConst), VIds)) (* infix (R) directive *)
            | INFIXR VIds (UnfixedSyntax.FixityDec (span(INFIXRleft, VIdsright), Syntax.Infix (Syntax.RightAssoc 0), VIds)) (* infix (R) directive *)
            | NONFIX VIds (UnfixedSyntax.FixityDec (span(NONFIXleft, VIdsright), Syntax.Nonfix, VIds)) (* nonfix directive *)

Dec : Dec_NoLocal (Dec_NoLocal)
    | LOCAL Decs IN Decs END (UnfixedSyntax.LocalDec (span(LOCALleft, ENDright), Decs1, Decs2)) (* local declaration *)

(* declarations *)
Decs : Dec Decs (Dec :: Decs)
     | SEMICOLON Decs (Decs) (* sequential declaration *)
     | (nil) (* empty declaration *)

(* LongStrId[1] ... LongStrId[n] *)
LongStrIds : LongStrId LongStrIds (LongStrId :: LongStrIds)
           | LongStrId (LongStrId :: nil)

(* VId[1] ... VId[n] *)
VIds : VId VIds (VId :: VIds)
     | VId (VId :: nil)

(* value bindings *)
ValBind : Pat EQUALS Exp AND ValBind (UnfixedSyntax.PatBind (span(Patleft, ValBindright), Pat, Exp) :: ValBind)
        | Pat EQUALS Exp (UnfixedSyntax.PatBind (span(Patleft, Expright), Pat, Exp) :: nil)
        (* | REC ValBind (UnfixedSyntax.RecValBind (span(RECleft, ValBindright), ValBind)) *)

FValBind : FMatch ([UnfixedSyntax.FValBind(span(FMatchleft, FMatchright), FMatch)])
         | FMatch AND FValBind (UnfixedSyntax.FValBind(span(FMatchleft, FMatchright), FMatch) :: FValBind)

FMatch : FMRule ([FMRule])
       | FMRule_NoMatch BAR FMatch (FMRule_NoMatch :: FMatch)

FMRule : FPat COLON Ty EQUALS Exp (UnfixedSyntax.FMRule (span(FPatleft, Expright), FPat, SOME Ty, Exp))
       | FPat EQUALS Exp (UnfixedSyntax.FMRule (span(FPatleft, Expright), FPat, NONE, Exp))

FMRule_NoMatch : FPat COLON Ty EQUALS Exp_NoMatch (UnfixedSyntax.FMRule (span(FPatleft, Exp_NoMatchright), FPat, SOME Ty, Exp_NoMatch))
               | FPat EQUALS Exp_NoMatch (UnfixedSyntax.FMRule (span(FPatleft, Exp_NoMatchright), FPat, NONE, Exp_NoMatch))

FPat : AtPats (UnfixedSyntax.FPat(span(AtPatsleft, AtPatsright), AtPats))
(*
       OP BoundVId AtPats
     | BoundVId AtPats
     | AtPat BoundVId AtPat
     | LPAREN AtPat BoundVId AtPat RPAREN
     | LPAREN AtPat BoundVId AtPat RPAREN AtPats
*)

(* type bindings *)
TypBind : TyVarSeq TyCon EQUALS Ty AND TypBind (Syntax.TypBind (span(TyVarSeqleft, Tyright), TyVarSeq, TyCon, Ty) :: TypBind)
        | TyVarSeq TyCon EQUALS Ty (Syntax.TypBind (span(TyVarSeqleft, Tyright), TyVarSeq, TyCon, Ty) :: nil)

(* datatype bindings *)
DatBind : TyVarSeq TyCon EQUALS ConBind DatBindRest (Syntax.DatBind (span(TyVarSeqleft, ConBindright), TyVarSeq, TyCon, ConBind) :: DatBindRest)

(* datatype bindings *)
DatBindRest : AND DatBind (DatBind)
            | (nil)

(* constructor bindings *)
ConBind : Opt_OP BoundVId OF Ty ConBindRest (Syntax.ConBind (span(Opt_OPleft, Tyright), BoundVId, SOME Ty) :: ConBindRest)
        | Opt_OP BoundVId ConBindRest (Syntax.ConBind (span(Opt_OPleft, BoundVIdright), BoundVId, NONE) :: ConBindRest)

ConBindRest : BAR ConBind (ConBind)
            | (nil)

(* exception bindings *)
ExBind : Opt_OP BoundVId OF Ty ExBindRest (Syntax.ExBind (span(Opt_OPleft, Tyright), BoundVId, SOME Ty) :: ExBindRest)
       | Opt_OP BoundVId ExBindRest (Syntax.ExBind (span(Opt_OPleft, BoundVIdright), BoundVId, NONE) :: ExBindRest)
       | Opt_OP BoundVId EQUALS Opt_OP LongVId ExBindRest (Syntax.ExReplication (span(Opt_OPleft, LongVIdright), BoundVId, LongVId) :: ExBindRest)

ExBindRest : AND ExBind (ExBind)
           | (nil)

StrExp : STRUCT StrDecs END (Syntax.StructExp(span(STRUCTleft, ENDright), StrDecs))
       | LongStrId (Syntax.StrIdExp(span(LongStrIdleft, LongStrIdright), LongStrId))
       | LET StrDecs IN StrExp END (Syntax.LetInStrExp(span(LETleft, ENDright), StrDecs, StrExp))

ProperStrDec : STRUCTURE StrBind (Syntax.StrBindDec(span(STRUCTUREleft, StrBindright), StrBind))
             | LOCAL StrDecs IN StrDecs END (Syntax.LocalStrDec(span(LOCALleft, ENDright), StrDecs1, StrDecs2))

StrDecs : Dec_NoLocal StrDecs (Syntax.CoreDec(span(Dec_NoLocalleft, Dec_NoLocalright), Dec_NoLocal) :: StrDecs)
        | ProperStrDec StrDecs (ProperStrDec :: StrDecs)
        | SEMICOLON StrDecs (StrDecs)
        | ([])

StrDecs_NoSemicolon : Dec_NoLocal StrDecs_NoSemicolon (Syntax.CoreDec(span(Dec_NoLocalleft, Dec_NoLocalright), Dec_NoLocal) :: StrDecs_NoSemicolon)
                    | ProperStrDec StrDecs_NoSemicolon (ProperStrDec :: StrDecs_NoSemicolon)
                    | ([])

StrBind : StrId EQUALS StrExp ([(StrId, StrExp)])
        | StrId EQUALS StrExp AND StrBind ((StrId, StrExp) :: StrBind)

TopDecs : StrDecs_NoSemicolon (StrDecs_NoSemicolon)
         (* TODO: sigdec, fundec *)

Program : TopDecs SEMICOLON Program (TopDecs @ Program)
        | Exp SEMICOLON Program (Syntax.CoreDec(span(Expleft, Expright), UnfixedSyntax.ValDec(span(Expleft, Expright), nil, [UnfixedSyntax.PatBind(span(Expleft, Expright), UnfixedSyntax.NonInfixVIdPat(span(Expleft, Expleft), Syntax.MkLongVId([], Syntax.MkVId "it")), Exp)])) :: Program) (* val it = Exp *)
        | (nil)
